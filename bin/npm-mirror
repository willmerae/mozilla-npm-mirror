#!/usr/bin/env node
var Download = require('../lib/download'),
    Package = require('../lib/package'),
    SyncManager = require('../lib/syncmanager'),
    UrlCheck = require('../lib/urlcheck'),
    check = require('validator').check,
    debug = require('debug')('npm-mirror'),
    fs = require('graceful-fs'),
    globalTunnel = require('global-tunnel-ng'),
    path = require('path'),
    program = require('commander'),
    temp = require('temp'),
    uuid = require('node-uuid');


/**
 * In https://bugzilla.mozilla.org/show_bug.cgi?id=937791 we add support for
 * specifying manifests as http urls. This function makes a manifests directory
 * and downloads all remote manifests into it.
 *
 * @param {string} manifests comma separated list of manifests.
 * @param {Function} callback(err, manifests) {};.
 */
function downloadManifests(manifests, callback) {
  // Find all of the manifests which need to be downloaded.
  var result = [];
  var remote = [];
  manifests = manifests.split(',');
  manifests.forEach(function(manifest) {
    if (UrlCheck.isWebUrl(manifest)) {
      remote.push(manifest);
    } else {
      result.push(manifest);
    }
  });

  var count = remote.length;
  if (count === 0) {
    return callback(null, manifests.join(','));
  }

  // Download the remote manifests.
  temp.mkdir('manifests', function(err, dir) {
    if (err) {
      return callback(err);
    }

    debug('remote manifests synced to ' + dir + ' temporarily');
    remote.forEach(function(manifest) {
      var dest = path.join(dir, uuid.v4() + '.json');
      fs.unlink(dest, function() {
        Download.inst.downloadToDisk(manifest, dest, function() {
          result.push(dest);
          if (--count === 0) {
            callback(null, result.join(','));
          }
        });
      });
    });
  });
}

/**
 * Find and parse manifest file.
 *
 * @param {string} manifestFile path to node module manifest file.
 * @return {Object} JSON-parsed module manifest.
 */
function parseManifest(manifestFile) {
  manifestFile = path.resolve(__dirname, '..', manifestFile);
  if (!fs.existsSync(manifestFile)) {
    throw new Error('Could not find manifest at ' + manifestFile);
  }

  return require(manifestFile);
}

/**
 * Make a packages directory if there isn't one already.
 *
 * @param {string} root path for mirrored packages.
 */
function resolveRoot(root) {
  var root = path.resolve(__dirname, '..', root);
  if (!fs.existsSync(root)) {
    fs.mkdirSync(root);
  }

  return root;
}

function main(master, manifests, hostname, root) {
  // master
  check(master).isUrl();

  // manifests
  var dependencies = manifests.split(',')
    .map(function(manifestFile) {
      return parseManifest(manifestFile);
    })
    .map(function(manifest) {
      return Package.dependencies(manifest);
    });
  var packageToVersions = Package.mergeDependencies(dependencies);

  // hostname
  check(hostname).isUrl();

  // root
  root = resolveRoot(program.root);

  var syncManager = new SyncManager(master, packageToVersions, hostname, root);
  debug('sync from ' + master);
  debug(JSON.stringify(packageToVersions));
  syncManager.sync(function(e) {
    if (e) {
      throw e;
    }

    debug('done');
  });
}

if (require.main === module) {
  program
    .version('1.4.2')
    .usage([
      '--master', '<host>',
      '--manifests', '<file_1,file_2,...file_n>',
      '--hostname', '<url>',
      '--root', '<path>'
    ].join(' '))
    .option('--master [url]', 'NPM registry to mirror packages from')
    .option('--manifests [comma separated files]',
      'Node module manifests given by fs paths or http urls')
    .option('--hostname [hostname]', 'Hostname for npm mirror')
    .option('--root [path]', 'Path to write downloaded packages')
    .parse(process.argv);

  if (!(program.master &&
        program.manifests &&
        program.hostname &&
        program.root)) {
    program.help();
  }

  // Use http(s) proxy, if http(s)_proxy environment variable specifies it
  globalTunnel.initialize();
  debug('proxyConfig %s', JSON.stringify(globalTunnel.proxyConfig));

  temp.track();
  downloadManifests(program.manifests, function(err, manifests) {
    if (err) {
      throw err;
    }

    main(program.master, manifests, program.hostname, program.root);
  });
}
